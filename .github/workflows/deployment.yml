
name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_BE_REPOSITORY: ${{ secrets.ECR_BE_REPOSITORY }}
  ECR_FE_REPOSITORY: ${{ secrets.ECR_FE_REPOSITORY }}

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR (Backend)
      id: build-image-backend
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build --platform linux/amd64 -t $ECR_REGISTRY/$ECR_BE_REPOSITORY:$IMAGE_TAG ./backend
        docker push $ECR_REGISTRY/$ECR_BE_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_BE_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Build, tag, and push image to Amazon ECR (Frontend)
      id: build-image-frontend
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build --platform linux/amd64 \
          --build-arg VITE_SERVER_URL=${{ secrets.VITE_SERVER_URL }} \
          --no-cache -t $ECR_REGISTRY/$ECR_FE_REPOSITORY:$IMAGE_TAG ./frontend
        docker push $ECR_REGISTRY/$ECR_FE_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_FE_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Fill in the new image ID in the Amazon ECS task definition (Backend)
      id: task-def-backend
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ./.aws/backend-task-definition.json
        container-name: atticspace-be
        image: ${{ steps.build-image-backend.outputs.image }}

    - name: Fill in the new image ID in the Amazon ECS task definition (Frontend)
      id: task-def-frontend
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ./.aws/frontend-task-definition.json
        container-name: atticspace-fe
        image: ${{ steps.build-image-frontend.outputs.image }}

    - name: Deploy Amazon ECS task definition (Backend)
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def-backend.outputs.task-definition }}
        service: atticspace-be-srv
        cluster: atticspace-cluster
        wait-for-service-stability: true

    - name: Deploy Amazon ECS task definition (Frontend)
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def-frontend.outputs.task-definition }}
        service: atticspace-fe-srv
        cluster: atticspace-cluster
        wait-for-service-stability: true
